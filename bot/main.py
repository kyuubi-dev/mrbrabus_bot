import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, callback_query, FSInputFile, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, Command
# Other

from bot import keyboard as kb
from config import bot_token, admin

bot = Bot(token=bot_token)

class Form(StatesGroup):
    waiting_for_img = State()
    waiting_for_description = State()
    waiting_for_contact = State()

def startBOT(dp: Dispatcher):
    @dp.message(CommandStart())
    async def cmd_start(message: Message, state: FSMContext):
        user_id = message.from_user.id
        name = message.from_user.first_name
        if name is None:
            name = message.from_user.last_name
        
        await message.answer(text=f"üëã –ü—Ä–∏–≤–µ—Ç *{name}*, –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n\n*–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ*", reply_markup=kb.main(), parse_mode="Markdown")
        
    @dp.callback_query(F.data == 'submit')
    async def submit_processing(callback_query: types.CallbackQuery, state: FSMContext):
        await state.set_state(Form.waiting_for_img)
        await callback_query.message.edit_text(f"üñº –û—Ç–ø—Ä—å—Ç–µ —Ñ–æ—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", reply_markup=kb.submit(), parse_mode='Markdown')

    @dp.callback_query(F.data == 'main_menu')
    async def submit_processing(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.message.delete()
        name = callback_query.from_user.first_name
        if name is None:
            name = callback_query.from_user.last_name
        
        await callback_query.message.answer(text=f"üëã –ü—Ä–∏–≤–µ—Ç *{name}*, –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n\n*–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ*", reply_markup=kb.main(), parse_mode="Markdown")

    @dp.message(Form.waiting_for_img)
    async def process_img(message: Message, state: FSMContext):
        if message.photo:
            await state.update_data(photo=message.photo[-1])
            await message.answer("üëå –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
            await state.set_state(Form.waiting_for_description)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç...")

    @dp.message(Form.waiting_for_description)
    async def process_description(message: Message, state: FSMContext):
        await state.update_data(description=message.text)
        await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        await state.set_state(Form.waiting_for_contact)

    @dp.message(Form.waiting_for_contact)
    async def process_contact(message: Message, state: FSMContext):
        await state.update_data(contact=message.text)
        await message.answer("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É...")

        user_data = await state.get_data()
        photo = user_data['photo']
        description = user_data['description']
        contact = user_data['contact']

        user_photo_id = f"{message.from_user.id}_{photo.file_id[:10]}"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{user_photo_id}"),
                InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_photo_id}")
            ]
        ])

        admin_message = (
            f"*–û–ø–∏—Å–∞–Ω–∏–µ*:\n{description}\n\n"
            f"*–ö–æ–Ω—Ç–∞–∫—Ç—ã*: {contact}"
        )
        await bot.send_photo(admin, photo.file_id, caption=admin_message, reply_markup=keyboard, parse_mode='Markdown')

        await state.clear()

    async def send_post_to_channel(photo_id: str, description: str, contact: str):
        channel_username = "@test_3213"
        admin_message = (
            f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{description}\n\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {contact}"
        )
        await bot.send_photo(channel_username, photo_id, caption=admin_message)

    @dp.callback_query(lambda c: c.data.startswith('accept_') or c.data.startswith('reject_'))
    async def process_decision(callback_query: CallbackQuery, state: FSMContext):
        action, user_photo_id = callback_query.data.split('_', 1)
        user_id, file_id_part = user_photo_id.split('_', 1)

        user_data = await state.get_data()
        if 'photo' in user_data:
            photo = user_data['photo']
            description = user_data['description']
            contact = user_data['contact']

            if action == 'accept':
                await bot.send_message(user_id, "‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!")
                await send_post_to_channel(photo.file_id, description, contact)
                await callback_query.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ")
            elif action == 'reject':
                await bot.send_message(user_id, "‚ùå –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
                await callback_query.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        else:
            await callback_query.answer("–û—à–∏–±–∫–∞: –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


    @dp.callback_query(F.data == 'accepted')
    async def accepted_processing(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–æ")
    
    @dp.callback_query(F.data == 'rejected')
    async def rejected_processing(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")