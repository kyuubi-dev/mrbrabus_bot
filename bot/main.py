import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters.state import StateFilter

from bot import keyboard as kb
from config import bot_token, admin

bot = Bot(token=bot_token)

class Form(StatesGroup):
    waiting_for_announcement = State()
    waiting_for_img = State()
    waiting_for_contact = State()
    waiting_for_edit = State()

def startBOT(dp: Dispatcher):
    @dp.message(CommandStart())
    async def cmd_start(message: Message, state: FSMContext):
        await state.clear()
        name = message.from_user.first_name
        if name is None:
            name = message.from_user.last_name
        
        await message.answer(
            text=f"üëã –ü—Ä–∏–≤–µ—Ç *{name}*, —Å–æ—Å—Ç–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –í–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.",
            parse_mode="Markdown"
        )
        await state.set_state(Form.waiting_for_announcement)

    @dp.message(StateFilter(Form.waiting_for_announcement))
    async def process_announcement(message: Message, state: FSMContext):
        await state.update_data(description=message.text)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no_image")]
        ])
        
        await message.answer(
            text="–ü—Ä–∏–ª–æ–∂–∏—Ç–µ –æ–¥–Ω—É –∫–∞—Ä—Ç–∏–Ω–∫—É –µ—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å –µ—ë –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏",
            reply_markup=keyboard
        )
        await state.set_state(Form.waiting_for_img)

    @dp.callback_query(lambda c: c.data == 'no_image', StateFilter(Form.waiting_for_img))
    async def no_image(callback_query: CallbackQuery, state: FSMContext):
        await callback_query.message.answer("–£–∫–∞–∂–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–∞–∫ —Å –≤–∞–º–∏ –º–æ–≥—É—Ç —Å–≤—è–∑–∞—Ç—å—Å—è")
        await state.set_state(Form.waiting_for_contact)

    @dp.message(StateFilter(Form.waiting_for_img))
    async def process_img(message: Message, state: FSMContext):
        if message.photo:
            await state.update_data(photo=message.photo[-1].file_id)
            await message.answer("‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –£–∫–∞–∂–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–∞–∫ —Å –≤–∞–º–∏ –º–æ–≥—É—Ç —Å–≤—è–∑–∞—Ç—å—Å—è")
            await state.set_state(Form.waiting_for_contact)
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–µ—Ç'.")

    @dp.message(StateFilter(Form.waiting_for_contact))
    async def process_contact(message: Message, state: FSMContext):
        await state.update_data(contact=message.text)
        await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")

        user_data = await state.get_data()
        description = user_data['description']
        contact = user_data['contact']
        photo = user_data.get('photo')

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{message.from_user.id}")],
            [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{message.from_user.id}")],
            [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{message.from_user.id}")]
        ])


        admin_message = (
            f"‚ùóÔ∏è {description}\n\n"
            f"üîç *{contact}*"
        )

        if photo:
            await bot.send_photo(admin, photo, caption=admin_message, reply_markup=keyboard, parse_mode='Markdown')
        else:
            await bot.send_message(admin, admin_message, reply_markup=keyboard, parse_mode='Markdown')

        await state.clear()

    @dp.callback_query(lambda c: c.data.startswith('accept_') or c.data.startswith('reject_'))
    async def process_decision(callback_query: CallbackQuery, state: FSMContext):
        action, user_id = callback_query.data.split('_')
        user_id = int(user_id)

        original_message = callback_query.message

        if action == 'accept':
            await bot.send_message(user_id, "‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!")

            await original_message.edit_reply_markup()

            channel_username = "@gollandka"
            # channel_username = "@test_31031"

            original_caption = original_message.caption
            original_photo = None

            if original_message.photo:
                original_photo = original_message.photo[-1].file_id
                await bot.send_photo(channel_username, original_photo, caption=original_caption, parse_mode='Markdown')
            else:
                original_text = original_message.text
                await bot.send_message(channel_username, original_text)

            await callback_query.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ")

        elif action == 'reject':
            await bot.send_message(user_id, "‚ùå –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
            await original_message.edit_reply_markup(
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data="rejected")]
                ])
            )
            await callback_query.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")

    @dp.callback_query(lambda c: c.data.startswith('edit_'))
    async def process_edit(callback_query: CallbackQuery, state: FSMContext):
        action, user_id = callback_query.data.split('_')
        user_id = int(user_id)
        
        original_caption = callback_query.message.caption if callback_query.message.caption else callback_query.message.text
        original_photo_id = callback_query.message.photo[-1].file_id if callback_query.message.photo else None

        await state.update_data(
            original_caption=original_caption,
            original_photo_id=original_photo_id,
            user_id=user_id,
            message_id=callback_query.message.message_id,
            message_reply_markup=callback_query.message.reply_markup
        )
        
        await bot.send_message(admin, "‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")

        await state.set_state(Form.waiting_for_edit)

    @dp.message(StateFilter(Form.waiting_for_edit))
    async def process_new_text(message: Message, state: FSMContext):
        user_data = await state.get_data()
        new_text = message.text
        original_photo_id = user_data.get('original_photo_id')
        original_message_id = user_data.get('message_id')
        message_reply_markup = user_data.get('message_reply_markup')

        if original_photo_id:
            await bot.edit_message_caption(
                chat_id=admin,
                message_id=original_message_id,
                caption=new_text,
                reply_markup=message_reply_markup,
                parse_mode='Markdown'
            )
        else:
            await bot.edit_message_text(
                chat_id=admin,
                message_id=original_message_id,
                text=new_text,
                reply_markup=message_reply_markup,
                parse_mode='Markdown'
            )
        await bot.send_message(admin, "‚úÖ –ì–æ—Ç–æ–≤–æ.")

        await state.clear()

    @dp.callback_query(lambda c: c.data == 'rejected')
    async def rejected_processing(callback_query: CallbackQuery, state: FSMContext):
        await callback_query.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
